#!/usr/bin/env python2
# -*- coding: utf-8 -*-
##################################################
# GNU Radio Python Flow Graph
# Title: TX_CIR BPSK Pulse Shape
# Author: Varuliantor Dear
# Description: TX 0f repeat GLFSR 1 second
# Generated: Mon Oct 25 16:08:23 2021
##################################################

from datetime import datetime
from gnuradio import blocks
from gnuradio import digital
from gnuradio import eng_notation
from gnuradio import filter
from gnuradio import gr
from gnuradio.eng_option import eng_option
from gnuradio.filter import firdes
from optparse import OptionParser
import math


class top_block(gr.top_block):

    def __init__(self):
        gr.top_block.__init__(self, "TX_CIR BPSK Pulse Shape")

        ##################################################
        # Variables
        ##################################################
        self.fchirp = fchirp = 5100
        self.L_chirp = L_chirp = (2*2*2*2*2*2*2*2*2)-1
        self.sps = sps = 2
        self.baud_rate = baud_rate = fchirp*L_chirp
        self.samp_rate_tx = samp_rate_tx = 4000000
        self.samp_rate = samp_rate = baud_rate*sps
        self.freq_channel = freq_channel = 7102000
        self.filename = filename = "Tx7102Direct_"+ datetime.now().strftime("%d%m%Y_%H%M")  +".dat"

        self.BPSK_mod = BPSK_mod = digital.constellation_calcdist(([-1, 1]), ([0, 1]), 4, 1).base()


        ##################################################
        # Blocks
        ##################################################
        self.root_raised_cosine_filter_0_0 = filter.fir_filter_ccf(1, firdes.root_raised_cosine(
        	1, 2, 1, 0.35, 11*sps))
        self.rational_resampler_xxx_0_0 = filter.rational_resampler_ccc(
                interpolation=1,
                decimation=2,
                taps=None,
                fractional_bw=None,
        )
        self.rational_resampler_xxx_0 = filter.rational_resampler_ccc(
                interpolation=samp_rate_tx,
                decimation=baud_rate,
                taps=None,
                fractional_bw=None,
        )
        self.digital_constellation_modulator_0 = digital.generic_mod(
          constellation=BPSK_mod,
          differential=True,
          samples_per_symbol=sps,
          pre_diff_code=True,
          excess_bw=0.35,
          verbose=False,
          log=False,
          )
        self.blocks_file_source_0_0 = blocks.file_source(gr.sizeof_char*1, 'C:\\Users\\IonRad\\Documents\\GRC dan SoruceFile Desktop Sep2021/Mod60S82S82S8S.dat', False)
        self.blocks_file_sink_0 = blocks.file_sink(gr.sizeof_gr_complex*1, 'C:\\Users\\IonRad\\Desktop\\TxRefDirect_2MsPs_OKt21.dat', False)
        self.blocks_file_sink_0.set_unbuffered(False)

        ##################################################
        # Connections
        ##################################################
        self.connect((self.blocks_file_source_0_0, 0), (self.digital_constellation_modulator_0, 0))
        self.connect((self.digital_constellation_modulator_0, 0), (self.root_raised_cosine_filter_0_0, 0))
        self.connect((self.rational_resampler_xxx_0, 0), (self.rational_resampler_xxx_0_0, 0))
        self.connect((self.rational_resampler_xxx_0_0, 0), (self.blocks_file_sink_0, 0))
        self.connect((self.root_raised_cosine_filter_0_0, 0), (self.rational_resampler_xxx_0, 0))

    def get_fchirp(self):
        return self.fchirp

    def set_fchirp(self, fchirp):
        self.fchirp = fchirp
        self.set_baud_rate(self.fchirp*self.L_chirp)

    def get_L_chirp(self):
        return self.L_chirp

    def set_L_chirp(self, L_chirp):
        self.L_chirp = L_chirp
        self.set_baud_rate(self.fchirp*self.L_chirp)

    def get_sps(self):
        return self.sps

    def set_sps(self, sps):
        self.sps = sps
        self.set_samp_rate(self.baud_rate*self.sps)
        self.root_raised_cosine_filter_0_0.set_taps(firdes.root_raised_cosine(1, 2, 1, 0.35, 11*self.sps))

    def get_baud_rate(self):
        return self.baud_rate

    def set_baud_rate(self, baud_rate):
        self.baud_rate = baud_rate
        self.set_samp_rate(self.baud_rate*self.sps)

    def get_samp_rate_tx(self):
        return self.samp_rate_tx

    def set_samp_rate_tx(self, samp_rate_tx):
        self.samp_rate_tx = samp_rate_tx

    def get_samp_rate(self):
        return self.samp_rate

    def set_samp_rate(self, samp_rate):
        self.samp_rate = samp_rate

    def get_freq_channel(self):
        return self.freq_channel

    def set_freq_channel(self, freq_channel):
        self.freq_channel = freq_channel

    def get_filename(self):
        return self.filename

    def set_filename(self, filename):
        self.filename = filename

    def get_BPSK_mod(self):
        return self.BPSK_mod

    def set_BPSK_mod(self, BPSK_mod):
        self.BPSK_mod = BPSK_mod


def main(top_block_cls=top_block, options=None):

    tb = top_block_cls()
    tb.start()
    tb.wait()


if __name__ == '__main__':
    main()
