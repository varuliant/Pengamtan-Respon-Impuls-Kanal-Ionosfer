#!/usr/bin/env python2
# -*- coding: utf-8 -*-
##################################################
# GNU Radio Python Flow Graph
# Title: Rx_CIR_Okt2021
# Author: Varuliantor Dear
# Description: CIR receiver with 2M samp rate equal to bandwidth channel and sink out fromreceiver
# Generated: Sun Oct 17 10:55:04 2021
##################################################

from datetime import datetime
from gnuradio import analog
from gnuradio import blocks
from gnuradio import eng_notation
from gnuradio import filter
from gnuradio import gr
from gnuradio.eng_option import eng_option
from gnuradio.filter import firdes
from optparse import OptionParser
import math
import osmosdr
import time


class top_block(gr.top_block):

    def __init__(self):
        gr.top_block.__init__(self, "Rx_CIR_Okt2021")

        ##################################################
        # Variables
        ##################################################
        self.f_channel = f_channel = 7102000
        self.samp_rate = samp_rate = 2000000
        self.filename_1 = filename_1 = "/home/ion_rad/Data_RX_CIR/Rx7102_1M_"+  datetime.now().strftime("%d%m%Y_%H%M")  +".dat"
        self.filename = filename = "/home/ion_rad/Data_RX_CIR/Rx7102_2M_"+  datetime.now().strftime("%d%m%Y_%H%M")  +".dat"
        self.f_center = f_center = f_channel+500000
        self.ch_width = ch_width = 2000000

        ##################################################
        # Blocks
        ##################################################
        self.rational_resampler_xxx_0 = filter.rational_resampler_ccc(
                interpolation=1,
                decimation=2,
                taps=None,
                fractional_bw=None,
        )
        self.osmosdr_source_0 = osmosdr.source( args="numchan=" + str(1) + " " + "" )
        self.osmosdr_source_0.set_sample_rate(samp_rate)
        self.osmosdr_source_0.set_center_freq(f_center, 0)
        self.osmosdr_source_0.set_freq_corr(0, 0)
        self.osmosdr_source_0.set_dc_offset_mode(0, 0)
        self.osmosdr_source_0.set_iq_balance_mode(0, 0)
        self.osmosdr_source_0.set_gain_mode(True, 0)
        self.osmosdr_source_0.set_gain(10, 0)
        self.osmosdr_source_0.set_if_gain(20, 0)
        self.osmosdr_source_0.set_bb_gain(20, 0)
        self.osmosdr_source_0.set_antenna("", 0)
        self.osmosdr_source_0.set_bandwidth(0, 0)
          
        self.blocks_multiply_xx_0 = blocks.multiply_vcc(1)
        self.blocks_file_sink_0_0 = blocks.file_sink(gr.sizeof_gr_complex*1, filename_1, False)
        self.blocks_file_sink_0_0.set_unbuffered(False)
        self.analog_sig_source_x_0 = analog.sig_source_c(samp_rate, analog.GR_COS_WAVE, f_center-f_channel, 1, 0)

        ##################################################
        # Connections
        ##################################################
        self.connect((self.analog_sig_source_x_0, 0), (self.blocks_multiply_xx_0, 1))    
        self.connect((self.blocks_multiply_xx_0, 0), (self.rational_resampler_xxx_0, 0))    
        self.connect((self.osmosdr_source_0, 0), (self.blocks_multiply_xx_0, 0))    
        self.connect((self.rational_resampler_xxx_0, 0), (self.blocks_file_sink_0_0, 0))    

    def get_f_channel(self):
        return self.f_channel

    def set_f_channel(self, f_channel):
        self.f_channel = f_channel
        self.set_f_center(self.f_channel+500000)
        self.analog_sig_source_x_0.set_frequency(self.f_center-self.f_channel)

    def get_samp_rate(self):
        return self.samp_rate

    def set_samp_rate(self, samp_rate):
        self.samp_rate = samp_rate
        self.analog_sig_source_x_0.set_sampling_freq(self.samp_rate)
        self.osmosdr_source_0.set_sample_rate(self.samp_rate)

    def get_filename_1(self):
        return self.filename_1

    def set_filename_1(self, filename_1):
        self.filename_1 = filename_1
        self.blocks_file_sink_0_0.open(self.filename_1)

    def get_filename(self):
        return self.filename

    def set_filename(self, filename):
        self.filename = filename

    def get_f_center(self):
        return self.f_center

    def set_f_center(self, f_center):
        self.f_center = f_center
        self.analog_sig_source_x_0.set_frequency(self.f_center-self.f_channel)
        self.osmosdr_source_0.set_center_freq(self.f_center, 0)

    def get_ch_width(self):
        return self.ch_width

    def set_ch_width(self, ch_width):
        self.ch_width = ch_width


def main(top_block_cls=top_block, options=None):

    tb = top_block_cls()
    tb.start()
    time.sleep(7)
    tb.stop()


if __name__ == '__main__':
    main()
